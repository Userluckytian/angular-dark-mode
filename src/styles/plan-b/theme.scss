/*
 * Implementation of themes
 */
 $themes: (
  light: (
    backgroundColor: white,
    textColor: #408bbd,
    buttonTextColor: #408bbd,
    buttonTextTransform: none,
    buttonTextHoverColor: #61b0e7,
    buttonColor: #fff,
    buttonBorder: 2px solid #ff381e,
  ),
  dark: (
    backgroundColor: #222,
    textColor: #ddd,
    buttonTextColor: #aaa,
    buttonTextTransform: uppercase,
    buttonTextHoverColor: #ddd,
    buttonColor: #333,
    buttonBorder: 1px solid #333,
  ),
);

@mixin themify($themes) {
  @each $theme, $map in $themes {
    // $theme = light $map = { ... }
    :host-context(.theme-#{$theme}) & {
      $theme-map: () !global; // 定义了全部变量
      @each $key, $submap in $map {
        $value: map-get(
          map-get($themes, $theme),
          "#{$key}"
        ); //  $value:  map-get(这个就$map, '#{$key}') // 自然获取的就是最终的值！
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global; // map-merge是合并的意思，将这些变量声明为了全局变量！
      }
      @content;
      $theme-map: null !global; // 又清空了全部变量
    }
  }
}

@function themed($key) {
  @return map-get($theme-map, $key);
}

// 上面代码优化：

@mixin newThemify($themes: $themes) {
  @each $theme, $map in $themes {
    :host-context(body[app-theme-style="dark"]) {
      $theme-map: map-get($themes, $theme) !global;
      @content;
    }
    :host-context(body[app-theme-style="light"]) {
      $theme-map: map-get($themes, $theme) !global;
      @content;
    }
  }
}

// 其他文件的代码解释：

// @include themify($themes) {
// 在使用这个函数的过程中，theme的全局变量都在！然后这个时候就可以获取！
//   color: themed('textColor');
//   background-color: themed('backgroundColor');
// 该函数执行完成后，全局变量已经清空了！
// }

// 缺点：太消耗内存了！艹
